<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: parser combinators | Blog about sofware development]]></title>
  <link href="http://ytaras.github.io/blog/categories/parser-combinators/atom.xml" rel="self"/>
  <link href="http://ytaras.github.io/"/>
  <updated>2013-05-21T08:10:14+03:00</updated>
  <id>http://ytaras.github.io/</id>
  <author>
    <name><![CDATA[Yura Taras]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala Workshop - day 1, parsers]]></title>
    <link href="http://ytaras.github.io/blog/2013/05/10/scala-workshop-1/"/>
    <updated>2013-05-10T14:27:00+03:00</updated>
    <id>http://ytaras.github.io/blog/2013/05/10/scala-workshop-1</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s continue on WAAS (workflow-as-a-service). In this post I&rsquo;m going
to show how to use parsers combinators to parse our workflow
definitions.</p>

<p>Have a look at sample workflow definition file we&rsquo;re going to parse. It
contains 2 worflow definitions &ndash; one for issue tracking system and other
for deals.</p>

<p>```
workflow issue {
  start state open</p>

<pre><code>             goes to started;
</code></pre>

<p>  state started  goes to open, resolved;
  state resolved goes to closed, open;
  state closed;
};</p>

<p>workflow project {
  start state negotiation</p>

<pre><code>           goes to signed, failed;
</code></pre>

<p>  state signed goes to failed, done;
  state done   goes to paid, failed;
  state paid;
  state failed;
};
```</p>

<p>At the end of this post we&rsquo;re going to have a parser, which transforms
textual definitions to our internal model, ready for persistense.</p>

<!-- more -->


<h2>Parsers in ANTLR</h2>

<p>To target that task, let&rsquo;s start with something more conventional than
Scala parsers. <a href="http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form">EBNF</a> format is widely used for describing grammar, so
we&rsquo;re going to start with that:
<code>
goes       = 'goes', ws, 'to', ws, { identifier, ',', ws }, identifier;
state      = [ 'start', ws ], 'state', ws, goes, ws, ';'
workflow   = 'workflow', ws, identifier, ws, '{', ws, { state, ws },  ws, '}', ws, ';'
workflows  = { workflow }
ws         = ? whitespace characters ?
identifier = letter { letter | number | '_' }
</code></p>

<p>In order to generate executable parsers, we should define the grammar
in some DSL specific for a parser framework we choose. Let&rsquo;s define a
grammar in <a href="http://www.antlr.org/">ANTLR4</a> &ndash; well known parser in Java world:
<code>
grammar workflowGrammar;
file: workflowDefinition* EOF;
workflowDefinition: 'workflow' ID '{' stateDefinition*?'}' ';';
stateDefinition: 'start'? 'state' ID goes? ';';
goes: 'goes' 'to' (ID',')* ID;
ID: [a-zA-Z]([a-z0-9_])* ;
WS: [ \t\r\n]+ -&gt; skip;
</code>
Based on that grammar we are ready to generate lexer and parser. For
ones who are not familiar with those terms &ndash; lexer is a converter from
input stream to stream of tokens and parser is converter from a stream
of tokens to a parse tree. Anyway, this distinction is not critical in
our case, so I will refer to lexer+parser combination as simply parser.</p>

<p>I leave ANTLR parser generation and execution as an exercise for a reader.
Still, here&rsquo;s sample parsed tree you could view using <a href="http://tunnelvisionlabs.com/products/demo/antlrworks">ANTLRWorks</a>:
```
(file</p>

<pre><code>(workflowDefinition workflow issue {
    (stateDefinition start state open (goes goes to started) ;)
    (stateDefinition state started (goes goes to open , resolved) ;)
    (stateDefinition state resolved (goes goes to closed , open) ;)
    (stateDefinition state closed ;)
 } ;)
(workflowDefinition workflow project {
    (stateDefinition start state negotiation (goes goes to signed , failed) ;)
    (stateDefinition state signed (goes goes to failed , done) ;)
    (stateDefinition state done (goes goes to paid , failed) ;)
    (stateDefinition state paid ;)
    (stateDefinition state failed ;)
 } ;)
</code></pre>

<p><EOF>)
```
You can easily see that this tree is much easier to convert to our model
than a flat string we had on our input.</p>

<p>ANTLR is a great tool and is used in most cases when we need parsing
capabilities in Java world. Anyway, there&rsquo;s a thing you should notice
about grammar definition &ndash; it is so called &lsquo;external DSL&rsquo; &ndash; it means
that this is a separate language, which needs it&rsquo;s own parser and
compiler. If instead we would try to define grammar using Java directly,
it would be a huge pain to write, read and support.</p>

<h2>Parser combinators framework</h2>

<p>Scala goes with it&rsquo;s own parser framework, very much
inspired by Haskell&rsquo;s <a href="http://legacy.cs.uu.nl/daan/parsec.html">Parsec</a> framework and is a part of standart
Scala library. In a contrast, Scala&rsquo;s parsers are written using plain
Scala using some syntatical features and tricks of a language. This
approach is called <a href="http://martinfowler.com/bliki/DomainSpecificLanguage.html">Internal DSL</a></p>

<p>Idea behind parser combinators is very simple: every parser is defined
as a function from its input to parse result. Parser result contains
output value or failure message and rest of input:
<code>scala
def parse(input: Input): Result = ???
sealed trait Result
case class Success(result: Output, next: Input) extends Result
case class Failure(failure: String, next: Input) extends Result
</code>
A fact that not-consumed part of input is returned back turns out to be
 a very usefull feature, because it enables easy parser
composition. BTW, composition is kind of fetish in functional
programming community &ndash; ability to define small primitives and compose
larger thing of it is recognized as design success. With that in mind,
parser combinators are definitelly a success &ndash; all parser tutorials
start with creating a parser which parses a single char and than create
much more expressive parsers on top of that primitive. I won&rsquo;t do that
in this post, instead I will act as a parser library user. Anyway, I
strongly recommend reading great <a href="http://henkelmann.eu/2011/01/13/an_introduction_to_scala_parser_combinators">series of posts on that topic</a>. If
you don&rsquo;t afraid Haskell (and you shouldn&rsquo;t!), there are two chapters on
our topic in &lsquo;Real World Haskell&rsquo; book &ndash;
<a href="http://book.realworldhaskell.org/read/code-case-study-parsing-a-binary-data-format.html">Code case study: parsing a binary data format</a> and
<a href="http://book.realworldhaskell.org/read/using-parsec.html">The Parsec parsing library</a>. This is a really interesting stuff to
read &ndash; and I give up explaining parser combinators to that guys.</p>

<p>So let&rsquo;s create a file <code>src/main/scala/parser/parser.scala</code> and add
following content to it:
```scala
package parsers</p>

<p>import scala.util.parsing.combinator._</p>

<p>object SampleParser extends JavaTokenParsers {
  def number = floatingPointNumber
  def twoNumbers = number ~ number
}
```</p>

<p>Let&rsquo;s start from the beginning. We import all required imports and then
extend our custom object from <code>JavaTokenParsers</code> class. This class is an
extension of default parsers class, <code>scala.util.parsing.combinator.Parsers</code>.
What&rsquo;s useful in that class in our case is that it does whitespaces handling
and provides few useful parsers, like <code>ident</code> or <code>floatingPointNumber</code> we&rsquo;re using in this example.</p>

<p>Launch console with <code>sbt console</code> and have a look at types:
```
scala> import parsers.<em>
import parsers.</em></p>

<p>scala> import SampleParser.<em>
import SampleParser.</em></p>

<p>scala> :type number
parsers.SampleParser.Parser[String]</p>

<p>scala> :type twoNumbers
parsers.SampleParser.Parser[parsers.SampleParser.~[String,String]]
<code>``
Ok, now it should be easier to tell what's going on. Each parser has a type -
what is returned on successful parse. For example,</code>number<code>parser
returns (somewhat surprisingly) String. But what's interesting is a second parser,
which is constructed as a combination of 2 parsers and return</code>~[String, String]<code>- yet
another type to present data tuple. We can use</code>twoNumbers` parser on it&rsquo;s own or
construct more parsers on top of it &ndash; and this is what composition is about.</p>

<p>After defining parsers we can use them. There are 2 methods &ndash; <code>parse</code> and <code>parseAll</code>.
Difference is that second fails if parser didn&rsquo;t consume all the input. Here are some
examples of using that:
```scala
object ParserExample extends App {
  import SampleParser._</p>

<p>  println(&ldquo;Parsing whole string &lsquo;123&rsquo; as a number&rdquo;)
  println(parseAll(number, &ldquo;123&rdquo;).get)
  println(&ldquo;Parsing whole string &lsquo;123 321&rsquo; as a number&rdquo;)
  parseAll(number, &ldquo;123 123&rdquo;) match {</p>

<pre><code>case x: NoSuccess =&gt; println(x.msg)
</code></pre>

<p>  }
  println(&ldquo;Parsing string &lsquo;123 321&rsquo; as a number&rdquo;)
  println(parse(number, &ldquo;123&rdquo;).get)
  println(&ldquo;Parsing whole string &lsquo;123 321&rsquo; as two numbers&rdquo;)
  println(parseAll(twoNumbers, &ldquo;123 321&rdquo;).get)
}
```</p>

<p>Go ahead and run this program &ndash; there are 1 failing and 3
successful examples.</p>

<p>So far so good, but how do we convert parser output to types we need? That&rsquo;s what <code>^^</code>
method is for. Let&rsquo;s make our first parser to convert result to float and second
one to multiply floats it parses:
```scala
  def number: Parser[Float] = floatingPointNumber ^^ { _.toFloat }
  def twoNumbers: Parser[Float] = number ~ number ^^ { x =></p>

<pre><code>x._1 * x._2
</code></pre>

<p>  }
```</p>

<p>As shown here, <code>^^</code> operator takes parser on a left and a converter function
on a right, and a result is a parser which returns converted result.</p>

<p>If you are afraid of pseudo-graphic operators, don&rsquo;t be &ndash; there&rsquo;s more to come.</p>

<h3>Creating a model</h3>

<p>Before we can parse, I advise to create a model for our workflows, so we have a stable ground
to work on.</p>

<p>```scala model/model.scala
package model</p>

<p>case class Step(name: String, goesTo: List[String], start: Boolean)
case class Workflow(name: String, steps: List[Step])
```</p>

<p>This is just enough to get started.</p>

<h3>Converting grammar</h3>

<p>Let&rsquo;s start with creating simple non-converting parser:</p>

<p><code>scala parsers/parser.scala
object WorkflowParsers extends JavaTokenParsers {
  def workflows = workflow.*
  def workflow = ("workflow" ~&gt; ident &lt;~ "{") ~ step.* &lt;~ ("}" ~ ";")
  def step = ("start".? &lt;~ "step") ~ ident ~ goesTo.? &lt;~ ";"
  def goesTo = ("goes" ~ "to") ~&gt; (ident &lt;~ ",").* ~ ident
}
</code></p>

<p>I promised there will be more pseudo-graphics coming. Let&rsquo;s me explain few new things:</p>

<ul>
<li><code>parser.*</code> means zero-or-many combinator, so created parser will be executed zero or many times. In
example, workflows file contains zero or more workflow definitions</li>
<li>strings are implicitly converted to parsers, so <code>"workflow"</code> is actually a parser which accepts &lsquo;workflow&rsquo; string</li>
<li><code>ident</code> is a parser, which parses a Java identifier</li>
<li><code>parser1 ~&gt; parser2</code> means that both parsers are executed, but only result of right one is stored,
so <code>"workflow" ~&gt; ident</code> ensures there&rsquo;s a <code>workflow</code> word before an identifier, but result will
store only identifier value. Same for <code>&lt;~</code>, which drops the right value and stores left</li>
<li><code>parser.?</code> is optional combinator, so <code>goesTo.?</code> means there can be or not be <code>goes to</code> part
in step definition</li>
</ul>


<p>With that in mind, you probably should be able to read through parser definition and see
it&rsquo;s the same we expressed in ANTLR4 grammar. Let&rsquo;s load this into console and have a look at types generated for us.</p>

<p>```
scala> :type goesTo
parsers.WorkflowParsers.Parser[parsers.WorkflowParsers.~[List[String],String]]</p>

<p>scala> :type workflows
parsers.WorkflowParsers.Parser[List[parsers.WorkflowParsers.~[String,List[parsers.WorkflowParsers.~[parsers.WorkflowParsers.~[Option[String],String],Option[parsers.WorkflowParsers.~[List[String],String]]]]]]]
```</p>

<p>Wow, if for simple parser <code>goesTo</code> it&rsquo;s theoretically readable, for top-level <code>workflows</code> parser it quickly gets out of control.
We should use our converter functions to get return result to something more usable. I&rsquo;m going to start with <code>goesTo</code>. First, I&rsquo;ll
explicitly set a type to more desired one:</p>

<p><code>scala
def goesTo: Parser[List[String]] =  ("goes" ~ "to") ~&gt; (ident &lt;~ ",").* ~ ident
</code></p>

<p>If we try to compile that, we will get a compile error. I want to fix it, but I don&rsquo;t want to
write working implementation right away, as I want to use TDD here. So I came for help to <code>???</code>
operator I described earlier:
```scala
  def goesTo: Parser[List[String]] = (&ldquo;goes&rdquo; ~ &ldquo;to&rdquo;) ~> (ident &lt;~ &ldquo;,&rdquo;).* ~ ident ^^ {</p>

<pre><code> _ =&gt; ???
</code></pre>

<p>  }
```</p>

<p>What I&rsquo;m writing here &ndash; I want to convert parse result to <code>List[String]</code>, but I&rsquo;m not sure
about implementation yet, so compile this but throw an error in runtime if someone calls this.</p>

<p>It&rsquo;s time to write some tests:</p>

<p>```scala parser/WorkflowParserSpec.scala
package parsers</p>

<p>import org.specs2.mutable.<em>
import org.specs2.ScalaCheck
import WorkflowParsers.</em></p>

<p>class WorkflowParserSpec extends Specification {
  &ldquo;Parser&rdquo; should {</p>

<pre><code>"parse goes to" in { 
   parseAll(goesTo, "goes to one, two, three").get must_== 
     List("one", "two", "three")
}
</code></pre>

<p>  }
}
```</p>

<p>Note <code>.get</code> method, which is a sneak around type system to give us ability
to take parse result without working on failure conditions. If parse fails, <code>.get</code>
throws exception in runtime, which is good enough for testing. Anyway, in
production code we should use some more consistent approach and I&rsquo;ll go to that in next posts.</p>

<p>If we run a test, we&rsquo;ll receive <code>implementation is missing</code> error, which is exactly what we expected. Let&rsquo;s
now flesh out an implementation:</p>

<p>```scala parser/WorkflowParserSpec.scala
  def goesTo: Parser[List[String]] = (&ldquo;goes&rdquo; ~ &ldquo;to&rdquo;) ~> (ident &lt;~ &ldquo;,&rdquo;).* ~ ident ^^ {</p>

<pre><code> case list ~ last =&gt; list :+ last
</code></pre>

<p>  }
```</p>

<p>We saw our non-converting parser returns <code>~[List[String], List]</code> class and it is implemented in a way
it makes possible pattern-matching on that. It makes possible a trick <code>case list ~ last</code>, where
<code>list</code> and <code>last</code> are deconstructed values of parser result. What we need to do is to append
last result to a list &ndash; and it&rsquo;s done with <code>:+</code> list operator. Run a test and it succeeds.</p>

<p>If we load a console once more, we&rsquo;ll notice that not only type of <code>goesTo</code> parser changes, but
of all the other parsers make on top of that:</p>

<p>```
scala> :type goesTo
parsers.WorkflowParsers.Parser[List[String]]</p>

<p>scala> :type workflows
parsers.WorkflowParsers.Parser[List[parsers.WorkflowParsers.~[String,List[parsers.WorkflowParsers.~[parsers.WorkflowParsers.~[Option[String],String],Option[List[String]]]]]]]
```</p>

<h3>Doing other parser</h3>

<p>Let&rsquo;s convert other parsers.</p>

<p>```scala parser/parser.scala
  def workflows: Parser[List[Workflow]] = workflow.<em>
  def workflow: Parser[Workflow] = (&ldquo;workflow&rdquo; ~> ident &lt;~ &ldquo;{&rdquo;) ~ step.</em> &lt;~ (&ldquo;}&rdquo; ~ &ldquo;;&rdquo;) ^^ {</p>

<pre><code>_ =&gt; ???
</code></pre>

<p>  }
  def step: Parser[Step] = (&ldquo;start&rdquo;.? &lt;~ &ldquo;step&rdquo;) ~ ident ~ goesTo.? &lt;~ &ldquo;;&rdquo; ^^ {</p>

<pre><code> _ =&gt; ???
</code></pre>

<p>  }
```</p>

<p>And now let&rsquo;s have some tests:</p>

<p>```scala parser/WorkflowParserSpec.scala</p>

<pre><code>"parse start step" in {
  parseAll(WorkflowParsers.step, "start step name goes to one, two, three;").get must_==
     Step("name", List("one", "two", "three"), true)
}
"parse empty step" in {
  parseAll(WorkflowParsers.step, "step name;").get must_==
     Step("name", List(), false)
}
"parse empty workflow" in {
  parseAll(workflow, """workflow wf {};""").get must_==
     Workflow("wf", List())
}
"parse not-empty workflow" in {
  parseAll(workflow, """workflow wf {
                          start step one goes to two;
                          step two;
                        };""").get must_==
     Workflow("wf", List(Step("one", List("two"), true), Step("two", List(), false)))
}
</code></pre>

<p>```</p>

<p>I know there&rsquo;s a lot duplications and I&rsquo;m going to do some refactoring in my next post.</p>

<p>I encourage you to go ahead and try to fix those tests by yourself. I have created a tagged revision
so it should be easier for you to setup environment:</p>

<p><code>sh
git clone https://github.com/ytaras/scala_waas.git
cd scala_waas
git checkout day1-homework
</code></p>

<p>I also submitted a solution for the impatient &ndash; have a look at tag <code>day1-homework-solved</code>,
anyway you&rsquo;ll learn better if you try to do the homework yourself.</p>

<h3>Conclusion</h3>

<p>This was a long post. Hopefully, it was useful, as I&rsquo;m going to continue hacking our new and shiny WAAS service.
I&rsquo;m looking forward for receiving comments and questions from you &ndash; and will meet in the next post.</p>
]]></content>
  </entry>
  
</feed>
